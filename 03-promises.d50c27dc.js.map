{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAWF,SAASC,cAAc,wBACxC,IAAIE,EAAU,KACVC,EAAgB,EAwCpB,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAGhCC,GADUZ,EAAOa,SACVA,SAASD,KAAKE,OAE3B,IAAIC,EAAYC,OAAOR,GAASI,GAAQP,EAAgB,GAExD,OAAO,IAAIY,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KACLX,EACFS,EAAI,uBAAqBX,QAAiBQ,OAExCI,EAAE,sBAAoBZ,QAAeQ,MAAc,GAEvD,G,CArDNf,EAAOqB,iBAAiB,UAExB,SAA2BC,GACzBA,EAAEC,iBACFpB,EAASqB,UAAW,EAEpB,MAAMX,EAAWS,EAAEG,cAAcC,QAC3BlB,EAAQK,EAASL,MAAMM,MACvBF,EAAOC,EAASD,KAAKE,MACZD,EAASc,OAAOb,MAS/B,SAASc,IACP,MAAMC,EAAUvB,EAAcD,EAAeG,GAE7CH,GAAgB,EAEZA,EAAgBW,OAAOc,SACzBC,cAAc3B,GACdC,EAAe,EACfF,EAASqB,UAAW,GAG1BK,EAAQG,MAAKC,IACXC,EAAApC,GAASqC,OAAOC,QAAQH,EAAO,IAC1BI,OAAMC,IACPJ,EAAApC,GAASqC,OAAOI,QAAQD,EAAM,G,CArBlClB,YAAW,KACTQ,IACAxB,EAAUoC,aAAY,KACpBZ,GAAc,GACbhB,EAAK,GACPJ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst buttonEl = document.querySelector('button[type=\"submit\"');\nlet timerId = null;\nlet promisesCount = 1;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(e) {\n  e.preventDefault();\n  buttonEl.disabled = true;\n\n  const elements = e.currentTarget.element;\n  const delay = elements.delay.value;\n  const step = elements.step.value \n  const amount = elements.amount.value \n\n  setTimeout(() => {\n    showPromises();\n    timerId = setInterval(() => {\n      showPromises();\n    }, step)\n  }, delay)\n\n  function showPromises() {\n    const promise = createPromise(promisesCount, delay);\n\n    promisesCount +=1;\n\n    if (promisesCount > Number(amout)) {\n      clearInterval(timerId);\n      promisesCount =1 \n      buttonEl.disabled = false;\n    }\n\npromise.then(result => {\n  Notiflix.Notify.success(result);\n    }).catch(error => {\n      Notiflix.Notify.failure(error);\n    });\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const element = formEl.elements;\n  const step = elements.step.value;\n\n  let delayInMs = Number(delay) + step * (promisesCount - 1);\n\n  return new Promise((res, rej) => {\n    setTimeout(()=>{\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delayInMs}ms`)\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delayInMs}ms`)\n      }\n    })\n  })\n\n  \n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$buttonEl","$47d4ff9957288465$var$timerId","$47d4ff9957288465$var$promisesCount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","step","elements","value","delayInMs","Number","Promise","res","rej","setTimeout","addEventListener","e","preventDefault","disabled","currentTarget","element","amount","showPromises","promise","amout","clearInterval","then","result","$parcel$interopDefault","Notify","success","catch","error","failure","setInterval"],"version":3,"file":"03-promises.d50c27dc.js.map"}